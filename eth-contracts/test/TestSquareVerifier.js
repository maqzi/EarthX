// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');
const fs = require('fs');

contract('TestSquareVerifier', accounts => {

    const account_one = accounts[0];

    describe('test verifier', function () {
        beforeEach(async function () {
            this.contract = await Verifier.new({from: account_one});

            try {
                const jsonString = fs.readFileSync('../zokrates/code/square/proof.json');
                this.json = JSON.parse(jsonString);
            } catch(err) {
                if (err) assert.equal(err, null, "cant read file");
            }
        })

        it('should verify with correct proof', async function () {
            // Test verification with correct proof
            // - use the contents from proof.json generated from zokrates steps
            let json = this.json
            assert.equal(await this.contract.verifyTx(json["proof"]["a"], json["proof"]["b"], json["proof"]["c"], json["inputs"]), true, "couldn't verify correct proof");

        })

        it('should not verify with incorrect proof values', async function () {
            // Test verification with incorrect proof
            // c swapped with a
            let json = this.json
            assert.equal(await this.contract.verifyTx(json["proof"]["c"], json["proof"]["b"], json["proof"]["a"], json["inputs"]), false, "couldn't verify correct proof");

        })
    })
});